/* soapmgopfserverService.cpp
   Generated by gSOAP 2.8.25 from mgopfserver.h

gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapmgopfserverService.h"

mgopfserverService::mgopfserverService() : soap(SOAP_IO_DEFAULT)
{	mgopfserverService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

mgopfserverService::mgopfserverService(const mgopfserverService& rhs)
{	soap_copy_context(this, &rhs);
}

mgopfserverService::mgopfserverService(const struct soap &_soap) : soap(_soap)
{ }

mgopfserverService::mgopfserverService(soap_mode iomode) : soap(iomode)
{	mgopfserverService_init(iomode, iomode);
}

mgopfserverService::mgopfserverService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	mgopfserverService_init(imode, omode);
}

mgopfserverService::~mgopfserverService()
{
	this->destroy();
}

void mgopfserverService::mgopfserverService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:mgopfserver", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void mgopfserverService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void mgopfserverService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	mgopfserverService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
mgopfserverService *mgopfserverService::copy()
{	mgopfserverService *dup = SOAP_NEW_COPY(mgopfserverService(*(struct soap*)this));
	return dup;
}
#endif

mgopfserverService& mgopfserverService::operator=(const mgopfserverService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int mgopfserverService::soap_close_socket()
{	return soap_closesock(this);
}

int mgopfserverService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int mgopfserverService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int mgopfserverService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int mgopfserverService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int mgopfserverService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void mgopfserverService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void mgopfserverService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *mgopfserverService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void mgopfserverService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *mgopfserverService::soap_header()
{	return this->header;
}

int mgopfserverService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int mgopfserverService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET mgopfserverService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET mgopfserverService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int mgopfserverService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int mgopfserverService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__mgopfserver(mgopfserverService*);

int mgopfserverService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:mgopfserver"))
		return serve_ns__mgopfserver(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__mgopfserver(mgopfserverService *soap)
{	struct ns__mgopfserver soap_tmp_ns__mgopfserver;
	struct ns__mgopfserverResponse soap_tmp_ns__mgopfserverResponse;
	int soap_tmp_int;
	soap_default_ns__mgopfserverResponse(soap, &soap_tmp_ns__mgopfserverResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__mgopfserverResponse.status = &soap_tmp_int;
	soap_default_ns__mgopfserver(soap, &soap_tmp_ns__mgopfserver);
	if (!soap_get_ns__mgopfserver(soap, &soap_tmp_ns__mgopfserver, "ns:mgopfserver", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->mgopfserver(soap_tmp_ns__mgopfserver.processNum, soap_tmp_ns__mgopfserver.host, soap_tmp_ns__mgopfserver.user, soap_tmp_ns__mgopfserver.password, soap_tmp_ns__mgopfserver.dbName, soap_tmp_ns__mgopfserver.port, soap_tmp_ns__mgopfserver.algorithmID, soap_tmp_ns__mgopfserverResponse.status);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__mgopfserverResponse(soap, &soap_tmp_ns__mgopfserverResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__mgopfserverResponse(soap, &soap_tmp_ns__mgopfserverResponse, "ns:mgopfserverResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__mgopfserverResponse(soap, &soap_tmp_ns__mgopfserverResponse, "ns:mgopfserverResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
